name: internal OpenWrt image builder
on: 
  workflow_call:
    inputs:
      build_settings:
        type: string
        required: true


jobs:
  internal-image-builder:
    name: internal OpenWrt builder
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Install packages
        run: |
          sudo apt-get update && \
          sudo apt-get install -y \
                build-essential \
                clang \
                flex \
                bison \
                g++ \
                gawk \
                gcc-multilib \
                g++-multilib \
                gettext \
                git \
                libncurses-dev \
                libssl-dev \
                python3-setuptools \
                rsync \
                unzip \
                zlib1g-dev \
                file \
                curl \
                jq \
                wget && \
          sudo apt-get clean

      - name: Env from caller
        run: |  
          echo '${{inputs.build_settings}}' | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' >> $GITHUB_ENV
          
      - name: Prepare source code
        run:  |
          git clone $SOURCE_REPO --branch $SOURCE_BRANCH .
          git clone $BUILD_REPO --branch $BUILD_BRANCH $BUILD_BRANCH
          cp $BUILD_BRANCH/script/*.sh .
          rm -rf $BUILD_BRANCH
          sh $BUILD_INIT $BUILD_TYPE $BUILD_VER $BUILD_SYNC $BUILD_TAG

      - name: Update feeds
        run:  scripts/feeds update -a && scripts/feeds install -a
      
      - name: Generate config
        run:  sh genconfig_${BUILD_TYPE}.sh ${BUILD_VER} ${BUILD_KMOD}

      - name: Build firmware images
        run:  make -j$(($(nproc)+1)) world
      
      - name: Get build version
        run:  |
          cat `find staging_dir -name banner`
          echo build_id=$(cat `find staging_dir -name banner` | grep OpenWrt | cut -d"," -f 2 | xargs) >> $GITHUB_ENV

      - name: Prepare release
        run:  sh release.sh ${BUILD_TYPE} ${BUILD_VER}

      - name: Release
        uses: ncipollo/release-action@v1
        with:
            tag: qualcommax-${{env.BUILD_TYPE}}-${{env.BUILD_VER}}-${{env.build_id}}
            allowUpdates: true
            artifacts: release/*
            bodyFile: note.md
        
